OOP or Object Oriented Programming is a programming style or paradigms, this means that it is like a manner of coding and set up your programs and instructions in your mind.


The reason why oop came to life is that it solves the major problems with the other programming pridigms that were befor it (procedural).

The procedural programming paridigm is one of the most used styles of programming, it basicly consist on seperating the whole program into two main blocks, data and instructions. This is very helpful but the existence of two independent block like this leads to organization and implementation security risks, since every varibale is global, or just owned by one function.

So the oop solved this problem, this time not by breaking the entire program into two parts but by destructuring the program into object which can contain several varaibles called propreties and several functions called methods, so this idea of breaking your program into chapters modelized by objects increases the implementation security of the code base, and also gives the programmer a good organization based manner of coding.



This principle is called the encapsulation, it groups all the related data and functions into an object. This is the first of the four pillar of oop.


The second pillar is inheritence, and this basicly says that we can build an object modal and make other objects copies of this modal, then we says the the produced object inherited from the modal project. This will help us to avoid repetitive code, and respect the dry principle.


Abstraction is also another pillar of oop, this consist of the fact that the global overview of an object (which is called the interface) is usally simplified to make the interaction between the programmer and this peace of data easier. This is done by hiding the details, like some propreties that are not ment to be indexed and used just in the methods, or hiding some function that are not ment to be invoked by the user, but just by other more meaningfull methods that will be eventually the ones that will be called.




Polymorphism is the last oop piller. Poly means many, morphism means forms, so polymorphism means many forms, and this basicly refers to the fact that an object can have many forms even if it has the same modal or schemma with another one. This is very useful if we want to handel multiple cases which are similar but not identical, like imaging html elements, to render everyone of them in the procedural way we will have to write a very long and nasty switch case statement, but with oop, we can just add to the modal a render method and call it from every entity out there.




From here and out we will be looking to the practical oop using javaScript.



Factory function: this notion refers to a function that returns an object, which is not availible before, so this function will create it and then set it key value pairs, lastly it will return it.

Constructor: this notion refers to a function that modifies an existing object by refrence, this means that when we call the constructor function the this keyword will point to an existing object, this is why we use constructor functions after the keyword new, which will basiclly create an instence of object and points the this pointer to that object in the current scope.



So with that been said we know now that every object has been created with a function, and we call this function the object constructure function, and we can access it just by refrecing it by the . notation after the objectname, exmple: user.constructor.

The default constructor function in javascript, is the Object built in function, this function is the one that creats the object that we declare letteraly like for exemple:

	let user = {
		username : "name",
		id: "21"
	};
	  
When we write this, the built in Object constructor function will be invoked in order to create this object.

So behind the scenes, that peace of code will be interpreted like this:

	let user = new Object(username: "name", id:"21");
	
-----------------------------------------------------------------------
Notes:	 in javascript any data types diffrent then primitives are objects, so arrays, functions and objects are just plain objects
-----------------------------------------------------------------------

	
Data representation in javascript:

in javascript we have only two types of data representation, we have premitives (numbers, strings, booleans, undefined, null), and refrence types (objects, functions, arrays) or just objects.


And the diffrence is that when we assign to a variable a primitive  data (like a string or so), we are assigning it value to. But when we assign a variable an object, an array or a function, we are assigning it address in the memory.

let see this in practice: 

	let x = 10;
	let y = x;
	
	x++;
	
	console.log(x); // x = 11;
	console.log(y); // y = 10;
	
The reason why the y variable is returned as a 10 number, is that when we've done the assignement of x into it, we've basicly copied the value of x into it. So y and x are completely independent.


When we assign by refrence:

	let x = {value: 10};
	let y = x;
	
	x.value++;
	
	console.log(x.value); // x.value = 11;
	console.log(y.value); // y.value = 11;
	
	
The reason why the y variable is now containing the value proprety set to 11, is that when we've done the assignement of the x variable into it, we've basicly saved into y the address of the object stored in x.

So now, to manipulate the same object in memory we have to paths, we can go either by x or y. Now y and x are not independent.

----------------------------------------------------------------------

How to make some propreties or methods within an object private to simplify the object outer interface, and create a greate layer of abstraction?.


So we do that by setting the members that we want to hide as local viariabls within the object, so as these members are just accessible by the other members of the same object. Like this, we reduce the the interface  complexity of that object, and also we will end up with a better code since fewer members can be modified by the user.

Practice: 

Imagine that we have this object and we want to make the user.isLoggedin proprety private.


	function User(isLoggedin) {
		this.username : "name",
		this.hash : "hssa03",
		
		this.isLoggedin : isLoggedin, 
		
		
		this.forceLoggin : function() {
		         redirect('/login');
		},		
		
		this.skipLoggin  : function() {
			 redirect('/home');
		},
		
	};
	
	let user = new User(false);
	
	
	
With this implementation, the user of the client will be able to touch the user.isLoggedin proprety which can ruine the activity of our web app.


So to make this proprety private or in other words hidden for the user, we do this:


	function User(isLoggedin) {
		this.username : "name",
		this.hash : "hssa03",
		
		let isLoggedin = isLoggedin,
		
		this.forceLoggin : function() {
			 redirect('/login');
		},		
		
		this.skipLoggin  : function() {
			 redirect('/home');
		},
		
	};
	
	let user = new User(false);
	
	
So now we have more abstaction and security layers.



----------------------------------------------------------------------

How to know if a variable is an object or a primitve?

we can basicly use the typeOf() function,


What is a prototype?

In javascript, every object, or any data container with a typeOf equal to object has a proprety called __proto__, and has a prototype the can be accessed by the entity modal object name, like if we have a string we can access the prototype object with String.prototype.

So a prototype is an object which behaves  like a librery of methods related to some object based entity, this object so called prototype is unique for all the the entities that are based on the same object modal (class), so for all strings, the __proto__ proprety in each one of them is a refrence (pointer) to the prototype proprety in the modal object, 

So if we have multiple strings and we want to add to them  a custom method, we don't need to go to each one and append it to it, we can just append it to the modal object prototype object, and we acheive that by doing this,

	 String.prototype.custom_method= function(){ // write your code here };



So to recap, a data type prototype is a schemma saved as an object in memory, and every instence of that data type contains the __proto__ proprety which is basicly a pointer to the data type prototype.



To understand even further, let explaine what is happening behind the scenes when we are using objects. We will use this line of code

	let me = new Person("massiles");
	me.hasOwnProprety("name");
	
You need to know that the new key word will create an empty object, set "this" equal to that object, set the __proto__ proprety of that object equal to the prototype of the constructor function called just after the new keyword.

So the first line of code will initiate an empty object that was created by the new keyword, and set it constructor function to the "Person" constructor, and it name proprety equal to "massiles".


Diagram of the current stat


  me.__proto__ -->  Person.prototype 
			Person.__proto__--> Object.prototype
						Object.__proto__ --> null
 

The second line of code will invoke the "hasOwnProprety" method from the "me" object. But we did not declare this methode on that instence of person object. So how that is still working?

So javascript will actually search through the current object, "me" in this case, and if it founds nothing it goes back through the prototypal chain and looks up into the Person (constructor) and its prototype, and if it is also not there, it goes back further more and looks up into the Object  prototype. It like a doublly linked list, imagin that the "me" object is the last node, and the __proto__ is like the previous pointer that points to the Person object, and the person object prototype proprety is like a schemma, and this Person object has also a __proto__ proprety which is like the Person node previous pointer that points to the Object built it javascript prototype.

So with that say we can now understand these line of code 

	me.__proto__ === Person.prototype // true
	Person.__proto__ === Object.prototype // true
	Object.prototype // null
	
	console.log(me.__proto__.__proto__); // prompt Object.prototype
	console.log(me.__proto__.__proto__.__proto__); // null

------------------------------------------------------------------------------
  
What are getters and setters?



A getter or a setter is just a special method that we added up to the class or our object implementation. Where a getter is a method, no parameters, used to get a single proprety and we call it by the dot notation adding to it the name of that proprety, and a setter is a single parameter method used to set a proprety, and we call it by the dot notation adding to it the name of that particular proprety and assigning to it a value.

In a constroctor function we add this up with the Object.defineProprety built in method, and then we pass the current object that will be created and we add up to it a proprety that is passed as an object in the third parameter for the defineProprety function call.

In classes and object littrals, this is much more simpler, we just need to add the get or set keyword befor the function declaration.

In js, the getters and the setters are added to the prototype object refrence.
So as all instances of object created will contains these setters and getters.


-------------------------------------------------------------------------------

What are static methods?

Basicly static methods are the opposite of instence methods, which means that they are not passed or accessible form an instance object, but they are just implemented in the Constructor object, and we can use that for various reasons like if a method does not have any relation with any instance, in this case the output of this method is the same across all the object instences, so it is more efficient to make it as static and we will have it in the construtor function only rather then have it in all the inctences which make no diffrence in the output, but decrease the performance.

----------------------------------------------------------------------------
What does the Object.create() method.
Object.create() is a built in method that basicly creates a new object and set its prototype to the passed object as a parameter.

this is like assigning the prototype pointer to an already existing object, whereas in the constuctor fuctions and the classes we are basicly changing the object that the prototype pointer points to.

Just another way to do the same things


---------------------------------------------------------------------------
A project idea that can help you to understand better or perfectly the oop paradigm, this idea consiste on taking a procedural code base implementation and turn it into a oop implementation.

For exemple: I will take the singleLinkedList library that I wrote in pascal (procedural) and turn it into a javascript library (oop). With this I will learn the benefit of using the classes and the inheretence and the abstration principles, and surpass the diffecutly imposed when passing the singleLinkedList pointers, and also reduce the arguments count for the function that are manipulating the list structure or object ;) .

----------------------------------------------------------------------------------

One of the four pillars of OOP is encapsulation, and this basicly means that we tend to decide which feilds (propreties or methods) will be accessible to  the user.

Note: this is only availible in classes (or in javascript at least);

So we have two major ways to acheive that, we can either make a feild private or public.

To make a feild public, is it super simple, we kind of been doing this before, all we need to do is to declare the feild as a variable before our construtor function and that without the let or the const keywords.

exemple: 
		class List{
			// public feilds declaration
			length = 0;
			---------------------------
			constructor(name){
				this.name = name;
			}
		}

so in this exemple length is a public feild. So it can be accessible by the user and all the external code.

But this may cause a problem, the list length should not be a public feild it should be a read only proprety, so how are we gonna to fix this issues?

Well, we can make it a private proprety, and the create a getter to get it value.

like this: 

		class List{
			// private feilds declaration.		
			#length = 0;
			----------------------------
			constructor(name){
				this.name = name;
			}
			
			get length(){
				return this.#length;
			}
		}


--------------------------------------------------------------------------------
Static feilds are a bit diffrent then private or public feilds, the private and public feilds unlike the static keywords will basicly modify the apperance state of the specific feild on the instance. Whereas the static keyword will make a feild or usually a method only accessible by the class itself

exemple 

		class List{
			// public feilds declaration
			name;
			
			// private feilds declaration.		
			#length = 0;
			//----------------------------
			constructor(name){
				this.name = name;
			}
			
			get length(){
				return this.#length;
			}
			
			static getBuilder(){
				return this.constructor.name;
			}
		}

So the getBuilder() would not be accessible from the instances but just via the List class itself.

so
	let stack = new List("stack");
	
	stack.getBuilder(); // error
	List.getBuilder(); // retrun the constructor name === "LIST";
	
	
	
Static in this case is very useful, because since the constructor a specific proprety of the class itself, we don't want all of our instances to have this same method and that everytime it is called it indexes the class constructor prorprety, this may cause speed leaks or memory leaks.
So for that we save it once in the memory and we access it via the same way since it will be always the same output across allways.

More exemples : 



		class List{
			// public feilds declaration
			name;
			
			// private feilds declaration.		
			#length = 0;
			
			// static feilds declaration
			static version = "1.0.9";
			
			constructor(name){
				this.name = name;
			}
			
			get length(){
				return this.#length;
			}
			
			static getBuilder(){
				return this.constructor.name;
			}
			static getVersion(){
				return this.version;
			}
		}




		


---------------------------------------------------------------------------------
Js code test:


	const Car = function(name, speed){
		this.name = name;
		this.speed = speed;
	}
	

	Car.prototype.accelerate = function(){
		this.speed+=10;
		console.log("accelerating !!!");
	}
	
	function Ev(name, speed, charge){
		// call the Car constructor function
		// set its this pointer equal to the current Ev object
		// fill the name and the speed feilds, then the charge
		// this is the inheritence principle
		Car.call(this, name, speed);
		console.log(this);
		this.charge = charge;
	}
	
	
	Ev.prototype.accelerate = function(){
		Car.prototype.accelerate.call(this);
		this.charge-=12;
		
	}
	
	
	
	
	class Car{
		constructor(name,speed){
			this.name =name;
			this.speed =speed;
		}
		
		accelerate(){
			this.speed+=10;
			console.log('accelerating!!!');
		}
	}
	
	
	class Ev extends Car {
		constructor(name, speed, charge){
			super(name,speed);
			this.charge= charge;
		}
		
	}
	
	
	
	
	
	
	
		class Car {
			velocity;
			name;
			constructor(name, velocity){
				this.name = name;
				this.velocity = velocity;
			}
			
			accelerate(){
				this.velocity +=10;
				return this;
			}
			
			brake(){
				this.velocity -=15;
				return this;
			}
		}
		
		class Ev extends Car {
			#charge;
			constructor(name, velocity, charge){
				super(name,velocity);
				this.#charge = charge;
			}
			
			
			get charge(){
				return this.#charge;
			}
			
			accelerate(){
				this.__proto__.__proto__.accelerate.call(this);
				console.log("after the returning");
				this.#charge -= 5;
				return this;
			}
		}


		
	
	
