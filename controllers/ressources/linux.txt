/TP1

>Une fois dans le manuel;
-la touche espace permet d'élargir la page actuelle et elle nous propose plus d'option à propos de la commande qui accompagne la commande man dans notre demande!
-Un slash permet de rechercher les caractères écris juste après, c'est comme control+F dans le navigateur.
-Après d'avoir rechercher avec le slash, on tape dans la même interface 'n' (next) pour naviguer entre les mots selectionnés pour la recherche d'avant.
-la commande 'man 1 ls' va chercher le manuel de la commande ls dans la section num 1. Attentions, l'ordre et l'éspace est nécéssaire (entre la commande et ces arguments) pour éxecuter les commande à bien.
> Autres commandes que 'man';
-ls -lct permet de trier les fichiers du répertoire par date de modification décroissante
-'lsusb' permet de lister tous les appareils connecter à la machine par les ports usb.
-'ls --color' permet de distinguer entre les différants types de fichiers avec les couleurs.
-" cd /" permet de remonter vers le répertoire administrateur.
-" cd -" permet de revenir vers le répertoire précédant.
-Si on est dans le répertoire racine ou adminstrateur la commande "cd /usr/bin"  permet d'aller vers le répértoire bin de ubuntu où on peut trouver tous les commandes et les fichiers néssécaire pour que ubuntu marche à biens.
-"cd " la commande cd seulle permet de revenir vers le répertoire root, la même chose avec la commande "cd ~".
-The Echo command -Test.txt was a blank file and with the link created by the ln command between it and the Notes.txt file I was able ,with the echo command,to view and display the content of the file Notes.txt in the test.txt file
-ln command, this command allow us to create links to data on out disk, it can make two type of links physical(hard) ones which is the default behaviour of ln, and symbolick ones with the -s options, this links give us acces to the data and we have to know that a file-x and the data in it are completelly diffrent entities,so when creating a hard link, we are making a link between this data and the files that contains it directlly. If you noticed I said files in the last statment, this is because you are able to create multiple links to the same peice of data, for exemple; I can have to files that points to the same paragraph in a disk. So if we delete one hard link we still can access the data that it is pointing to with the other hard link. To visualize it, imagin a two diffrent roads , A & B that can be followed to go to one parking, so if we delete one of this paths, we still can make our car into the parking. In the other hand, if we are assuming to create a symbolick link, we are making some kind of relationship with the two files directly, so to access the data from the second file, we have to make it through the first file then read the data. In this case if we delete the first link that contains the data, we are no longer able to access the data that it contains in the past. To visualize it, back to our road-parking analogy, in this attempt we will go to the parking via an other path, this path is coumpound of two road C & D, this path oblige you to go through the C road then enter to the D one, so in this case if the D road is deleted (which represent the first file that contains the data), we find our self with no parking to stop our car! /check the computerhope.com documentation.



 
/TP2

-man ls>tmp command, will create a file named tmp in which we will find the manual page of the ls command, we can check it with more tmp.
- ls - ls / >tmp, Once the tmp file created this command will erase the tmp file content and will remplace it with the output of the command ls -l 
-ls -l >>tmp command, this one compared to the previous one, will not remplace the content of the tmp file, instead it will append to it the ls -l output in the current pwd. 
-ls - l tmp tmp2 command, this one will list the tmp file details, and will return an error message indicating that the tmp2 file does not exist.
-ls -l tmp tmp2>std.txt 2>&1 command line, this command line will ls -l the files tmp tmp2, and as all commands ls has two standard streams, and in this case both will have data cuz the tmp2 file does not exsist, so the next part of the command line will take the data the stderr stream and merge it to the stdout data as so as the stdout will contain the two streams data and at last the command line will  make the stdout(previous_stdout + stderr) as the new content of the std.txt file.
-2>&1 syntax, this syntax is added after a command and it will append the stderr data to the stdout content.



-Redirection in unix, is the way that we transfer some data from a data-container to an other. For example, cat "hello">>hello.txt, will redirect the data "hello" to the fil hello.txt instead of displaying it, because cat "hello" will display the word "hello" to the screen. So to redirect we have to know where do it and for what do it; This means that we have to know the data that will be transfered and the data-container that will be it futur container. And in generel we always want to redirect an output of a given command to a file or a directory like /dev/null; For that we have to know the command output streams, for short, each command have two standard streams, one called 1 and the second named 2, the 1 std(std = standardstream) is the stream that contains the response output, and if there is an error this one will be redirected to the 2 str. and sometimes we want to see the errors so we display the 2 str data to the screen just like when we are pinging /Link : https://linuxhint.com/what_is_dev_null/ || https://youtu.be/oyc_6UfoW3w. 
-the /dev/null directory, this linux directory is the semilar to the recyclebin of windows, linux stores on it every discardable data, like date, or old pings, old version numbers, so we can use it to throw on it some data that we have nothing to do with it, like as mentionned previously, when we are pinging to a server, we often want the errors to target then fix them, so when we use the command "ping" this one will output two streams std1 and std2, the second one is the one that containes the errors data, so we can redirect it to the screen and that by the "ping" command, meanwhile we will redirect the std1 data to somewhere else, and knowing that we do not need it, we can simply redirect it to the /dev/null emplacement; for that we write "ping google.com 1> /dev/null" . As a resault, it will display the errors alone. So for short: /dev.null is something that takes in any input from standard in an juste discards it, it does not do anything with it, so that is the idomatic bash way to say "let hide this particular output" /Link : https://linuxhint.com/what_is_dev_null/ || https://youtu.be/XGSK5xr_B_Q.
-Pipes in unix, is a tricky way often used to process some peace of data multiple times, and that by taking the output of one command and make as the input of the second command, the syntax is the following, cat Notes.txt | less, this command line will concatinate(read) the content of Notes.txt and will make it as the input of less, so as we can navigate throw the Notes.txt content with the less navigation tools. For short a pipe(|) takes the output of the command at the left and make it the input of the command at the right. /link :https://www.youtube.com/watch?v=oyc_6UfoW3w.


-Sort command, this command without any options will demand your to insert some data, and when you quit the inserting phase by pressing ctrl+D, the command will prompt again this data but in a sorted way, it sorts it by alphabitical and numeral order , for example' the a before the b and in case of numbers the 1 befor the 3 and so on.
-Head command, this command with an option of "-Num" will display a peace of the choosen file content and that by counting "Num" line from the begining(head). So for exemple, if we have a file that contains two pragraphs of 3 lines, the Head -3 command will display the first paragraph only / for info there is an inverse command for head and it is named tail : command line format with tail => "tail -3 file.txt".
-Grep command, this command with the searched string as an ajacent argument will read a particular file and search for this wanted string (the grep argument). For example we can use this command line " more Notes.txt | grep command " so this line of code will read the content of Notes.txt before inserting it as the stdin(input) of the grep command which will reread it and select word= "command".
-& keyword, this keyword is added to the end of a command line in order to make that command runing in the background, and it is super useful when a particular command takes a while to respond, like pinging, or uploading and downloading something. This command output will be the shell job Id surrounded with brackets and process Id will be printed next to it . /links:https://linuxize.com/post/how-to-run-linux-commands-in-background/. 
-fg command, this command will take all the background commands to the foreground in which it takes its name, and if we want to bring a particular command we can add an option in this format "%jobID".
-Jobs command, this command will display all the background commands, whatever if they are done or not, and has similar options with the ls command , the most used is jobs -l option.
-Kill command, this command will kill all the running processes(commands), so we often want to kill a single one, so we can follow this command with a particular option to deteminate the killing manner and also a command JobID to focus on this one. /link: https://linuxize.com/post/how-to-run-linux-commands-in-background/.



-sort < tmp > tmp2 ; head -5 < tmp2 ; rm tmp2, this command line will at first sort the content of tmp and redirect the output to tmp2 as the new data of this one, then the head -5 command will display the first five lines of the new tmp2 content and finally the rm command will erase the tmp2 file.
-ls -l>>tmp, this command works perfectly fine, the reason is that there is not an error while the whole process, that command line will take the ls -l command and appends it to the tmp file as data.
-Yes we can run multiple commands in the background and for this we have multiple choices; if we want the commands to run sequentilly we use this format "{command1 ; command2 ; } &". In the other hand if we want them to run in parallal we use this format " (command1 &) ; (command2 &)" or for short "command1 & command2 &". Besides there is some cases where we want to run the second command after the seccess of the previouse one, in like processing or analytics and similar things, for that we use this format " command1 && command2 &" . For more advenced porpuses we can combaine the two formats to get something like this "{command1; echo first finished;}&{command2; echo second finished; } & ". Links : https://stackoverflow.com/questions/14612371/how-do-i-run-multiple-background-commands-in-bash-in-a-single-line/14612605#14612605.

 
/TP3

-tar command, this command will accept an option and two argument, the commun used options are -c and -f, and the first argument will be the futur compressed file(we have to precise the extention .tar at the end of the first argument), and the second one will be the current file that we want to archive. the command line will be similar to this " tar -cf monrep.tar monrep"; the monrep.tar file will be the compressed one, and the monrep file is the current file in the working directory.
-gzip & bzip2 commmand, this duo of commands  are archivers, those utilities coupled with the correct options (man gzip to learn more ) will give us the power of archiving files and directories. there is a diffrence between them; bzip2 is more efficient in compressing then gzip(can compress further then gzip) , but gzip is much faster.
-tar -xzf command line, this one will be the inverse of tar -cf command, it will extract a compressed file that is already there, so the command line "tar -xzf monrep.tar.gz" will extract the file monrep from the archived file monrep.tar.gz, so we will end with another file "monrep" in our working directory, /Note the extracting command line will be done with the command tar and we have to precise the option -x and the option -z or -j, those two last will be choosen in refrence to the copressor engine used before, in short the option z is accoreded to the gzip command engine, and the j option is attributed to the bzip2 command engine. To sum up, if we have as mentionned befor the compressed file monrep.tar.gz, if we come to extract its content we can not use this command line 'tar -xjf monrep.tar.gz' because the extracting engine and the compressor engine used to compresse this file in the past are not identical, so we have to match them together, so the correct command line is 'tar -xzf monrep.tar.gz' to make it work. As a resault we will obtain the monrep file as the extracted version of the file monrep.tar.gz.
-ls XYZ? command line, this one will search for the files that thier names begins with the XYZ characters and has one additionnal charcter as the following. So if we use the command line "ls 201?" we will get as output a semilar content to this "2014 2016 2015" and so on.
-ls *E* command line, this one will search for the files that their names contains the character E inside; in this case the astherics '*' is an oprerator that is used to automate the search cuz the astherics can change its values by itself and it can take a value from non-characters to n-characters.
-ls *e || *o command line, this one will display the files that begins with "e" or "o" in thier name; so if we have two files; the name of the first begins with an "o"; and the name of the second with "e"; when we run this command we will get only the second, cuz it an exlusif or (xor); if the first is true then it will be displayed, same for the second; but if they are true simentainleslly only the file that verifies the first part of the xor statement will be displayed (it is simailar to the or in javascript ||);
-ls -lai command line, this one will display all the hidden and the not hidden files, with thier details and also an unique identifier (the role of the option i); 
-ls -id {file name} command line , this one will display the unique identifier of the file cited. For exemple; ls -id . ; will display the id of the current directory. 
-the sympolique links have diffrent id then the source file; meanwhile the hard links share the same with the original file; from this we can conclude that the id is attributed to the data contained in the file itself, so in the hard link sinarios, we are pointing to same peice of data so it is logic to have the same identifier; but in the oposite case, the symbolique one; we are no longer pointing to the same peace of data, but we are pointing to a data container, a file for exemple, so this file is itself a data structure so it has its location on the disk diffrent then the location where its data is situated; so it is ovious to get a diffrent identifier then this data. For a better understanding; take this analogy: each peace of data has a place on the disk; and each place in the disk has a unique identifier; so in the hard links sinarios; we are pointing directly (two files points to the same place on the disk), so it is logic to get the same identifier;  but in the oposite way, when we are dealing with symbolique links, we are dealing with one file that is pointing to the data on the disk( this one has the data id) then we have the symlink which is another file that is pointing to the first file, so knowing that the first file has a diffrent location in the disk then its data, the symlink will get the id of this new location( the id of the location of the file where it is pointing to);


/TP4

-in the linux world, each file have permessions, these permission changes for a user to another, and knowing that all files can be read by it owner or it group or others, so each file will give to it owner and it group and the others permission; these permission are essentielly the three read write execute possiblilities; so when we are listing (ls -lah) a directory full of files; we will see in each line correspending to each file 7 blocks of information. The first is the first character; that can be "d" for directories, "-" for normal files, "l" for symbolique link, "c" for characters files, or "b" for block files, and sometimes we will find "p" for named pipes, the second block of information is these permissions, they are spreded into three catigories, they are often displayed like this "rwx-rw--r--", we see that we can devide these permission into three catigories, from the first to the third character, then the fifth to the seventh, and in the last from the ninth to the eleventh character, so the first catigory is the owner of the file, the second one is for the group of the file, the last one is for the others.Then we have the third block of information which is the number of hard links made to the file then the forth block of information is compound of two names, the first is the name of the file owner, the second is the name of the file groupe. Moving to the fivth block which is the size of the file; Next to it we have the sixth block which represents the last modification date for each file. Finally we have the seventh block of info which is the name of the file.
-As mentionned before each file has permissions, attributed to it owner(user), groupe, and others; and to change them we use the command "chmod" so this command will give us the power to change the permission for a files, and we can spicify for what person (the owner(user) or the groupe or the others), so in the command line we can add or remove a permission, and to do that we write the "concerned person(a for all,u for the user, o for the other, g for the groupe)"+"arithmitique operation (= to set),(+ to add),(- to remove)" + "the name of the file", so the command line will be in this schema : "chmod a-r test.txt", this command line will remove the read permission for anybody for the test.txt file.
-Also we can change the owner or the groupe of each file, to change the owner we simply use the chown command and then we have to mention the new owner name before the file name; and for changing the file groupe we can do it by the chgrp wich is used just like the chown command : so the command line will be similar to this : chown root trash.txt; We can also change the owner and the groupe at the same time the command line will be structred like this : chown newOwnerName:NewGroupeName fileName.txt. / LINKS :https://youtu.be/rTrzkpwqd-c.
-For files, the read write command consiste at renaming it and modifing, removing or adding content to it, but in the directories world, the read write permissions has a diffrent impact, reading in a directory means accessing to its files and all that stuff, besides writing in a directory is means creating files and moving or removing them. Meanwhile, the execution permission in files means that it can be lunched as a program or a similar thing (that depends in the extention of the file), but the execution permission of a directory means that we can access to all its files even in depth.
-umask command, writing this command alone will display the mask of the accorded permission in the current working directory; the response is in integer format that defins our permissions; for exemple : 0022 (the first integer "first 0" will be ignored cuz it is for advenced permissions treating),and it means that when we are creating a file or a directory in the working-d, we will get it with the following permission: second integer "0" means that the user has all the permissions, the third integer "2" which stands for 20, means that the groupe has not the write permission, and the last integer "2" means that the others don't have the writing access. So we get these permissions when we will list with details (ls -lah) : -rwx-r-x-r-x .


/TP6
-the find command will alow us to search for files in our current directory or the specified directory;
-find -name command line will give us the ablity to search files with thier names
-find -type command line will give us the ablity to search files with thier types
-find -size coammnd line will give us the ablity to search files with thier sizes; if we want to search a file that with a size between 1ko and 4 ko we can use this command line "find -size +2 -8" each intger represent 512octet so 2*n will give us n ko.
-vi or vim is a text editor that is communly used in the word of scripts / LET IMPORT TEXT WRITTEN BY VIM : In the tech world, the shell term referce to a program with ui that give access to its user to interact with the component of its os; the shell can be equiped with a gui, but in the general it is not, the shell is used as a command prompt where we can of course write command and also script in order to interact with our system in depth (like the kernel itselfIn the tech world, the shell term referce to a program with ui that give access to its user to interact with the component of its os; the shell can be equiped with a gui, but in the general it is not, the shell is used as a command prompt where we can of course write command and also script in order to interact with our system in depth (like the kernel itself).




/** linux bash scripting basics


#! /bin/bash

# ECHO COMMAND
# echo Hello World!

# VARIABLES
# Uppercase by convention
# Letters, numbers, underscores
NAME="Bob"
# echo "My name is $NAME"
# echo "My name is ${NAME}"

# USER INPUT
# read -p "Enter your name: " NAME
# echo "Hello $NAME, nice to meet you!"

# SIMPLE IF STATEMENT
# if [ "$NAME" == "Brad" ]
# then
#   echo "Your name is Brad"
# fi

# IF-ELSE
# if [ "$NAME" == "Brad" ]
# then
#   echo "Your name is Brad"
# else 
#   echo "Your name is NOT Brad"
# fi

# ELSE-IF (elif)
# if [ "$NAME" == "Brad" ]
# then
#   echo "Your name is Brad"
# elif [ "$NAME" == "Jack" ]
# then  
#   echo "Your name is Jack"
# else 
#   echo "Your name is NOT Brad or Jack"
# fi

# COMPARISON
# NUM1=31
# NUM2=5
# if [ "$NUM1" -gt "$NUM2" ]
# then
#   echo "$NUM1 is greater than $NUM2"
# else
#   echo "$NUM1 is less than $NUM2"
# fi

########
# val1 -eq val2 Returns true if the values are equal
# val1 -ne val2 Returns true if the values are not equal
# val1 -gt val2 Returns true if val1 is greater than val2
# val1 -ge val2 Returns true if val1 is greater than or equal to val2
# val1 -lt val2 Returns true if val1 is less than val2
# val1 -le val2 Returns true if val1 is less than or equal to val2
########

# FILE CONDITIONS
# FILE="test.txt"
# if [ -e "$FILE" ]
# then
#   echo "$FILE exists"
# else
#   echo "$FILE does NOT exist"
# fi

########
# -d file   True if the file is a directory
# -e file   True if the file exists (note that this is not particularly portable, thus -f is generally used)
# -f file   True if the provided string is a file
# -g file   True if the group id is set on a file
# -r file   True if the file is readable
# -s file   True if the file has a non-zero size
# -u    True if the user id is set on a file
# -w    True if the file is writable
# -x    True if the file is an executable
########

#CASE STATEMENT
# read -p "Are you 21 or over? Y/N " ANSWER
# case "$ANSWER" in 
#   [yY] | [yY][eE][sS])
#     echo "You can have a beer :)"
#     ;;
#   [nN] | [nN][oO])
#     echo "Sorry, no drinking"
#     ;;
#   *)
#     echo "Please enter y/yes or n/no"
#     ;;
# esac

# SIMPLE FOR LOOP
# NAMES="Brad Kevin Alice Mark"
# for NAME in $NAMES
#   do
#     echo "Hello $NAME"
# done

# FOR LOOP TO RENAME FILES
# FILES=$(ls *.txt)
# NEW="new"
# for FILE in $FILES  
#   do
#     echo "Renaming $FILE to new-$FILE"
#     mv $FILE $NEW-$FILE
# done

# WHILE LOOP - READ THROUGH A FILE LINE BY LINE
# LINE=1
# while read -r CURRENT_LINE
#   do
#     echo "$LINE: $CURRENT_LINE"
#     ((LINE++))
# done < "./new-1.txt"

# FUNCTION
# function sayHello() {
#   echo "Hello World"
# }
# sayHello

# FUNCTION WITH PARAMS
# function greet() {
#   echo "Hello, I am $1 and I am $2"
# }

# greet "Brad" "36"

# CREATE FOLDER AND WRITE TO A FILE
# mkdir hello
# touch "hello/world.txt"
# echo "Hello World" >> "hello/world.txt"
# echo "Created hello/world.txt"

