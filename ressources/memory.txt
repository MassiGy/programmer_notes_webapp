Like in every programe, you will usualy need to declare a variable, and that whenever you want to keep something around, but where this thing is kept really?

So, when we declare a variable it like when we declare a parking place rental, we also decalre a memory slot rental, in other words we say to the computer that we will take up a specific slot of memory and use it for the up comming moments!

But how all of this is done?. To say it simply, the computer will search for an availible space in the memory that fits the needed space for our variable type and send it back to the compiler.

Well, what is sent, is it the phisical slot or something else that tends to represent it?. So, as you meight guess the computer will not send back an actual memory slot to the compiler, it just don't make sens at all, but it sends as mentioned above an entety that represent this specific slot. 

What is this entity?. It is the so called pointer, it is a variable data type, that stores the memory address of one particular variable or rather it particular memory slot. This new data type so to speak, is taking also memory space for it own, and in modern computers, it tends to take 8 bytes, so 64 bits.

How can we see it?. Well, some low level programming languages have the possibility to figure out the address of a specific variable, just like in C, we can add '&' befor the name of the variable, and print out the address to the screen, this can be made like this:

	int n = 50;
	// to print the value of n;
	printf("%i\n", n);
	// to print the address of n;
	printf("%p\n", &n);
	
Notice that we changed "%i" to "%p", because &n is not an integer data type entety, it is rather a pointer data type entety.


Well, if we can figure out the address of a variable, can we go all the way around, I mean can we find the variable value out of knowing it address?. Well, yes we can, and in C, there is this other piece of syntax that is designed for it, it the sprit prefixor '*', all we need to do in order to find the value of a variable going form its address is to prefix the pointer that points to it with a sprite, this can be done like this

	int n = 50;
	// declare the pointer that points to n;
	int *p = &n;
	
	// to print the value of n;
	printf("%i\n", n);
	// to print the value of n but going from the address;
	printf("%i\n", *p);
	
Notice that the "*p" has the same data type with n, and it is obvious because it represents it. And also see that when declaring a pointer we prefix it name with '*' to notice the compiler that this will be a pointer, but the weird part is the "int" keyword before it, why is it there?.

Well, it is a convention that we specify the data type of the value that the pointer will be pointing to, this makes our algorithms well designed and better, and also it keeps us away form memory addressing conflicts.



Well, we've been talking about adressing and adressing all the time, but how it the format of an address and how it looks like in the programming and the computer science world?.

So yeah, the address is just a indicator to a specific slot in the current machine memory, and as sayed above, it takes 8bytes, and it is a pointer data type entety. It is queit a good description, but to visualize it better, we will use the computer scientist conventions!. So, when a programmer writes down an address on paper or plain text, he writes a formated code that is compound of 16 characters each of them represented not in binary nither in decimals, but rather in hexadecimals, or in other words, it is written in base16 (from 0 to 9,A,B,C,D,E,F) , so with this type of format we can express 16 possible values for every digit and we can have 16 digits, so we have the possiblity to write down 16 to the power of 16 possible addresses; which is queit a lot!

An exemple of a written adress:

 0x323439FEBAC43D12

we begin the address with "0x", to say that we are dealing with the base 16 format. And then we express the address in this formated code : 323439FEBAC43D12

Note: 
We sayed that in the ./dataTypes.txt file that in C the string data type does not exist, but the string concept exists.
It turned out that in C, when we want to represent or declare rather a variable with a data type described as a string, we use the pointers and the char built-in data type, and we can acheive that by doing this: 

	char *s = 'h';
	
This acually means that we are pointing to a charachter, or to the first charachter of a specific sting like "hi".

And to expend the sting with this notion of pointers we can use the pointers arithmetics and add 'i' to the end of the initial string which is equal to 'h', just by doing 
	
		*(s+1) = 'i';
		
To remebmer:
	*s: gets the value stored on the address saved in s.
	&x: gets the address of the value x in the memory.
	typeX *p = &z; declares a pointer named p that points to 				the value saved under the name of z which 				is a variable of typeX 
	

Keep in mind that a pointer allways points to the location of the most left byte which your data structure is compound off. So imagine we have this piece of code,
	int x = 7;
	int* int_pointer = &x;
	
	so in this case x is represented in memory like this
	with for bytes because it is an int
       ________________________________
       |	|	|	|	|
       --------------------------------
       
       so the pointer will point to the first byte counting from the left.
       
       we will end up with this:
 	      _________________________________
int_pointer=> |	|	|	|	|
 	      ---------------------------------
  
	so if we do this now,
	
	short * short_pointer=&x;
	
	now we will end up with a pointer, pointing to the first two byte starting form the left of the x represetation in the memory.


-Segmentation fault and bus error explaination:

Segmentation fault, is the type of error message that you are handed back when you are trying to derefrence a null pointer, all the seg fault means is that you are looking through an address in your machine memory (RAM), which is not a part of any segmentations that your memory is devided to, so it not nither in the heap, nither in the stack, nither in the code segment, and nither in the data segment, which are the four principle memory segments. And it turns out that the null pointer pointer to the very first slot in the ram, which is in the most down left slot of you memory.

			|-----------|
			|-----------|
			|-----------|
			|-----------|
			|-----------|
			|-----------|
			|-----------|									
			 ^
			 |
			 
			 that your null pointer, is the 0x0000000000000000 address
			 
			 
			 
Bus error, is a littel bit diffrent, it is basicly saying that you are trying to derefrence something but not in the right place, you need to know that the compiler and the hardware are both agreed that every N byte data type figure, where N is an int, will be located at an address which is a multiple of N, so 
if your are derefrecing an int* , you have to be sure that this address is a multiple of 4, since ints are 4 byte wide, if this is the case, everything is ok, if not you will get a bus error, and the error is sended by the hardware as a signal, and your developement envirenment will catch it and return you the appropriate bus error.







---------------------------------------------------------------
Notes: 

-You can tell the system to give you a certain amount of memory with malloc(), short for "memory allocation", which is a function that takes an int as an argument and this parameter represents the amount of bytes that you are in need for.
-After using malloc(), you defenitly need to borrow back the amount of memory that we've been asking for to the systeme in order to not stuck in a memory leak which means that your computer runs out of memory.




-There is a tool called "valgrind" that is built-in in all GNU based systems that allows us to see where in our code we are causing memory leaks or segmentation faults!. The usage is queit simple, you can just write "valgrind ./executable".

---------------------------------------------------------------

- when we compile a function call with some local variables, the compiler will tell the system to allocate to that function a peice of memory equal to all the variables within that function scope adding to that the size of the function structure itself and what it is returning. This block of memory is call the activation record.

So if inside a specific activation record, of a certain function, your are trying to access some piece of memory via a local variable that is not in your current scope, or in other words which is not in that variable memory slot, you are probably touching to the other local variables or  some other function activation call. 





